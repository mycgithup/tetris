02.03 13:36
<!DOCTYPE html>
<html>
<head>
    <title>俄罗斯方块</title>
    <style>
        body { background-color: #f0f0f0; }
        #game-container {
            width: 300px;
            height: 600px;
            margin: 20px auto;
            background-color: #fff;
            border: 2px solid #333;
        }
        #score {
            text-align: center;
            font-size: 20px;
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <div id="score">得分: 0</div>
    <div id="game-container"></div>
 
    <script>
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        const scoreElement = document.getElementById('score');
 
        canvas.width = 300;
        canvas.height = 600;
        document.getElementById('game-container').appendChild(canvas);
 
        let score = 0;
        const block_size = 30;
        const matrix = [
            [1, 1, 1, 1],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ];
 
        function createMatrix(w, h) {
            const mat = [];
            while (h--) {
                mat.push(new Array(w).fill(0));
            }
            return mat;
        }
 
        function collide(arena, player) {
            const [m, o] = [player.matrix, player.pos];
            for (let y = 0; y < m.length; ++y) {
                for (let x = 0; x < m[y].length; ++x) {
                    if (m[y][x] !== 0 &&
                        (arena[y + o.y] &&
                            arena[y + o.y][x + o.x]) !== 0) {
                        return true;
                    }
                }
            }
            return false;
        }
 
        function createPlayer() {
            return {
                pos: { x: 4, y: 0 },
                matrix: matrix 
            };
        }
 
        function draw() {
            ctx.fillStyle = '#000';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
 
            drawMatrix(arena, { x: 0, y: 0 });
            drawMatrix(player.matrix, player.pos);
        }
 
        function drawMatrix(matrix, offset) {
            matrix.forEach((row, y) => {
                row.forEach((value, x) => {
                    if (value !== 0) {
                        ctx.fillStyle = '#FF0D72';
                        ctx.fillRect(x * block_size + offset.x * block_size,
                            y * block_size + offset.y * block_size,
                            block_size - 1, block_size - 1);
                    }
                });
            });
        }
 
        function merge(arena, player) {
            player.matrix.forEach((row, y) => {
                row.forEach((value, x) => {
                    if (value !== 0) {
                        arena[y + player.pos.y][x + player.pos.x] = value;
                    }
                });
            });
        }
 
        function rotate(matrix, dir) {
            for (let y = 0; y < matrix.length; ++y) {
                for (let x = 0; x < y; ++x) {
                    [
                        matrix[x][y],
                        matrix[y][x],
                    ] = [
                        matrix[y][x],
                        matrix[x][y],
                    ];
                }
            }
 
            if (dir > 0) {
                matrix.forEach(row => row.reverse());
            } else {
                matrix.reverse();
            }
        }
 
        function playerDrop() {
            player.pos.y++;
            if (collide(arena, player)) {
                player.pos.y--;
                merge(arena, player);
                playerReset();
                arenaSweep();
                updateScore();
            }
            dropCounter = 0;
        }
 
        function playerMove(dir) {
            player.pos.x += dir;
            if (collide(arena, player)) {
                player.pos.x -= dir;
            }
        }
 
        function playerReset() {
            const pieces = 'ILJOTSZ';
            player.matrix = createMatrix(4, 4);
            const piece = pieces[pieces.length * Math.random() | 0];
            switch (piece) {
                case 'I                   ':
 player.matrix = [
                        [0, 0, 0, 0],
                        [1, 1, 1, 1],
                        [0, 0, 0, 0],
                        [0, 0, 0, 0]
                    ];
                    break;
                case 'L':
                    player.matrix = [
                        [2, 0, 0],
                        [2, 2, 2],
                        [0, 0, 0]
                    ];
                    break;
                case 'J':
                    player.matrix = [
                        [0, 0, 3],
                        [3, 3, 3],
                        [0, 0, 0]
                    ];
                    break;
                case 'O':
                    player.matrix = [
                        [4, 4],
                        [4, 4]
                    ];
                    break;
                case 'T':
                    player.matrix = [
                        [0, 5, 0],
                        [5, 5, 5],
                        [0, 0, 0]
                    ];
                    break;
                case 'S':
                    player.matrix = [
                        [0, 6, 6],
                        [6, 6, 0],
                        [0, 0, 0]
                    ];
                    break;
                case 'Z':
                    player.matrix = [
                        [7, 7, 0],
                        [0, 7, 7],
                        [0, 0, 0]
                    ];
                    break;
            }
            player.pos.y = 0;
            player.pos.x = (arena[0].length / 2 | 0) -
                (player.matrix[0].length / 2 | 0);
            if (collide(arena, player)) {
                arena.forEach(row => row.fill(0));
                score = 0;
                updateScore();
            }
        }
 
        function arenaSweep() {
            let rowCount = 1;
            outer: for (let y = arena.length - 1; y > 0; --y) {
                for (let x = 0; x < arena[y].length; ++x) {
                    if (arena[y][x] === 0) {
                        continue outer;
                    }
                }
                const row = arena.splice(y, 1)[0].fill(0);
                arena.unshift(row);
                ++y;
                score += rowCount * 10;
                rowCount *= 2;
            }
        }
 
        function updateScore() {
            scoreElement.innerText = `得分: ${score}`;
        }
 
        let dropCounter = 0;
        let dropInterval = 1000;
 
        let lastTime = 0;
 
        function update(time = 0) {
            const deltaTime = time - lastTime;
            lastTime = time;
 
            dropCounter += deltaTime;
            if (dropCounter > dropInterval) {
                playerDrop();
            }
 
            draw();
            requestAnimationFrame(update);
        }
 
        const arena = createMatrix(12, 20);
 
        let player = createPlayer();
 
        document.addEventListener('keydown', event => {
            if (event.keyCode === 37) {
                playerMove(-1);
            } else if (event.keyCode === 39) {
                playerMove(1);
            } else if (event.keyCode === 40) {
                playerDrop();
            } else if (event.keyCode === 81) {
                rotate(player.matrix, -1);
                if (!collide(arena, player)) {
                    return;
                }
                rotate(player.matrix, 1);
            } else if (event.keyCode === 87) {
                rotate(player.matrix, 1);
                if (!collide(arena, player)) {
                    return;
                }
                rotate(player.matrix, -1);
            }
        });
 
        updateScore();
        update();
    </script>
</body>
</html>
